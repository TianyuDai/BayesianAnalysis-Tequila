{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bb0d1982",
   "metadata": {},
   "source": [
    "# Closure test of Bayesian analysis"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 3,
||||||| 6127868
   "execution_count": 29,
=======
   "execution_count": 1,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "503f6dc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# prepare\n",
    "import subprocess\n",
    "from multiprocessing import Pool, cpu_count\n",
    "import os, pickle, math, time\n",
    "\n",
    "import numpy as np\n",
    "from numpy.linalg import inv\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm as cm\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "# sns.set(\"notebook\")\n",
    "sns.color_palette('Set2')\n",
    "import pandas as pd\n",
    "\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.gaussian_process import GaussianProcessRegressor as gpr\n",
    "from sklearn.gaussian_process import kernels as krnl\n",
    "\n",
    "import scipy.stats as st\n",
    "from scipy import optimize\n",
    "from scipy.linalg import lapack\n",
    "\n",
    "from pyDOE import lhs\n",
    "import emcee\n",
    "import h5py\n",
    "\n",
    "FW = 600\n",
    "\n",
    "path = '/home/td115/research/BayesianAnalysis-Tequila'\n",
    "\n",
    "def save_fig(fig_id):\n",
    "    plt.savefig(path+fig_id, format='png', dpi=300)\n",
    "    \n",
    "def hist_1d_2d(X, Y, nameX, nameY):\n",
    "    left, width = 0.1, 0.75\n",
    "    bottom, height = 0.1, 0.75\n",
    "    spacing = 0.005\n",
    "    rect_scatter = [left, bottom, width, height]\n",
    "    rect_histx = [left, bottom + height + spacing, width, 0.15]\n",
    "    rect_histy = [left + width + spacing, bottom, 0.15, height]\n",
    "\n",
    "    fig = plt.figure(figsize=(4, 4))\n",
    "    ax = fig.add_axes(rect_scatter)\n",
    "    ax1 = fig.add_axes(rect_histx, sharex=ax)\n",
    "    ax2 = fig.add_axes(rect_histy, sharey=ax)\n",
    "    ax1.tick_params(axis=\"x\", labelbottom=False)\n",
    "    ax2.tick_params(axis=\"y\", labelleft=False)\n",
    "\n",
    "    ax.scatter(X, Y)\n",
    "    ax1.hist(X, density=True)\n",
    "    ax2.hist(Y, orientation='horizontal', density=True)\n",
    "    ax.set_xlabel(nameX)\n",
    "    ax.set_ylabel(nameY)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bca9edd",
   "metadata": {},
   "source": [
    "## Gaussian emulator"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 10,
||||||| 6127868
   "execution_count": 55,
=======
   "execution_count": 2,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "11a102be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gaussian emulator\n",
    "\n",
    "simulation = np.loadtxt(os.path.join(path, 'data', 'running_coupling', 'output_4obs'))\n",
    "simulation_err = np.loadtxt(os.path.join(path, 'data', 'running_coupling', 'output_err_4obs'))\n",
    "\n",
    "use_NL = True\n",
    "Y_model = np.sqrt(simulation) if use_NL else simulation\n",
    "\n",
    "SS  =  StandardScaler(copy=True)\n",
    "Npc = 4\n",
    "pca = PCA(copy=True, whiten=True, svd_solver='full')\n",
    "# Keep only the first `npc` principal components\n",
    "pc_tf_data = pca.fit_transform(SS.fit_transform(Y_model)) [:,:Npc]\n",
    "\n",
    "# The transformation matrix from PC to Physical space\n",
    "inverse_tf_matrix = pca.components_ * np.sqrt(pca.explained_variance_[:, np.newaxis]) * SS.scale_ \n",
    "inverse_tf_matrix = inverse_tf_matrix[:Npc,:]\n",
    "\n",
    "\n",
    "np.savetxt(path+'/data/inverse_tf_matrix', inverse_tf_matrix)\n",
    "np.savetxt(path+'/data/PCA_transformed_data', pc_tf_data)\n",
    "\n",
<<<<<<< HEAD
    "design = np.loadtxt(path+'/data/running_coupling/lhd_sampling_5d_new_param.txt')\n",
||||||| 6127868
    "design = np.loadtxt(path+'/data/running_coupling/lhd_sampling_5d.txt')\n",
=======
    "design = np.loadtxt(path+'/data/running_coupling/new_param/lhd_sampling_5d.txt')\n",
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
    "# design = design[:32]\n",
    "design_max = np.array([2., 2., 0.6, 3.5, 0.4])\n",
    "design_min = np.array([-0.8, -0.8, 0.16, 1.15, 0.1])\n",
    "design_ptp = design_max - design_min\n",
    "# design_ptp = np.array([1.9, 1.9, 1.9, 0.34, 2., 0.3])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 11,
||||||| 6127868
   "execution_count": 31,
=======
   "execution_count": 3,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "18a438a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\n",
||||||| 6127868
      "image/png": "\n",
=======
      "image/png": "\n",
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1,2,figsize=(10,4))\n",
    "importance = pca.explained_variance_\n",
    "cumulateive_importance = np.cumsum(importance)/np.sum(importance)\n",
    "idx = np.arange(1,1+len(importance))\n",
    "ax1.bar(idx,importance, alpha=0.5, color='cornflowerblue')\n",
    "ax1.set_xlabel(\"PC index\")\n",
    "ax1.set_ylabel(\"Variance\")\n",
    "# ax1.set_yscale(\"log\")\n",
    "ax2.bar(idx,cumulateive_importance, alpha=0.5, color='cornflowerblue')\n",
    "ax2.set_xlabel(r\"The first $n$ PC\")\n",
    "ax2.set_ylabel(\"Fraction of total variance\")\n",
    "plt.tight_layout()\n",
    "ax1.tick_params(direction=\"in\", which='both')\n",
    "ax2.tick_params(direction=\"in\", which='both')\n",
    "plt.savefig(path+\"/plots/running_coupling/PC_importance_2obs\")"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 12,
||||||| 6127868
   "execution_count": 10,
=======
   "execution_count": 4,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "924edd30",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "[0.77746048 0.91318165 0.97328193 0.98438271 0.98718422 0.98873101\n",
      " 0.99001793 0.99103624 0.9919203  0.99276815 0.99350361 0.99417974\n",
      " 0.99482156 0.99542945 0.99598663 0.9964945  0.99691782 0.9973167\n",
      " 0.99769615 0.99805133 0.99830129 0.99854121 0.99874801 0.99894042\n",
      " 0.99912044 0.99926248 0.99939258 0.99950437 0.99960349 0.99969389\n",
      " 0.99976584 0.99982267 0.99986611 0.99990403 0.99993333 0.99995911\n",
      " 0.9999797  0.99999521 1.         1.        ]\n"
||||||| 6127868
      "[0.86770793 0.9659415  0.97737458 0.980997   0.98430652 0.98614879\n",
      " 0.98752043 0.98867652 0.98970544 0.99072568 0.99165556 0.99238764\n",
      " 0.99308044 0.99375161 0.99432959 0.99488089 0.99536956 0.99580364\n",
      " 0.99623167 0.99662053 0.99697897 0.99733106 0.99764541 0.9978947\n",
      " 0.99812463 0.99834675 0.99854545 0.99874157 0.99889828 0.9990495\n",
      " 0.99918622 0.99931266 0.99942506 0.99952122 0.99960673 0.9996762\n",
      " 0.99974011 0.99979562 0.99984137 0.9998781  0.99990941 0.99993435\n",
      " 0.99995483 0.99996954 0.99998362 0.99999467 1.        ]\n"
=======
      "[0.69779203 0.88645334 0.95355582 0.98403559 0.98619477 0.98821056\n",
      " 0.98959443 0.99081906 0.99175254 0.99262712 0.9934485  0.99420272\n",
      " 0.99482612 0.99539828 0.99594155 0.99644937 0.99691673 0.99729396\n",
      " 0.99764002 0.99795654 0.99822802 0.99849129 0.99871699 0.99891559\n",
      " 0.9990875  0.99924762 0.99938118 0.9994944  0.99959241 0.9996801\n",
      " 0.99975669 0.99981092 0.99985968 0.99989774 0.99993493 0.99996351\n",
      " 0.99998656 0.99999482 1.         1.        ]\n"
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
     ]
    }
   ],
   "source": [
    "print(cumulateive_importance)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 13,
||||||| 6127868
   "execution_count": 11,
=======
   "execution_count": 5,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "c59d8f59",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "transformed = SS.fit_transform(Y_model)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 14,
||||||| 6127868
   "execution_count": 12,
=======
   "execution_count": 6,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "73a01b2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "\n",
||||||| 6127868
      "image/png": "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\n",
=======
      "image/png": "\n",
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(4, 4))\n",
    "plt.scatter(pc_tf_data.T[0], pc_tf_data.T[1], label='PCA', color='cornflowerblue', alpha=0.5)\n",
    "plt.scatter(transformed.T[0], transformed.T[1], label='original', color='tomato', alpha=0.5)\n",
    "plt.legend()\n",
    "plt.tick_params(direction=\"in\", which='both')\n",
    "plt.savefig('PCA_orthogonal')"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 15,
||||||| 6127868
   "execution_count": 56,
=======
   "execution_count": 7,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "d048d415",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------\n",
      "Training PC # 1\n",
<<<<<<< HEAD
      "GPR score: 0.996\n",
      "time: 0.081 seconds\n",
||||||| 6127868
      "GPR score: 0.987\n",
      "time: 0.095 seconds\n",
=======
      "GPR score: 0.816\n",
      "time: 0.085 seconds\n",
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
      "-----------------\n",
      "Training PC # 2\n",
<<<<<<< HEAD
      "GPR score: 0.983\n",
      "time: 0.067 seconds\n",
||||||| 6127868
      "GPR score: 0.991\n",
      "time: 0.036 seconds\n",
=======
      "GPR score: 0.353\n",
      "time: 0.060 seconds\n",
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
      "-----------------\n",
      "Training PC # 3\n",
<<<<<<< HEAD
      "GPR score: 0.974\n",
      "time: 0.089 seconds\n"
||||||| 6127868
      "GPR score: 0.872\n",
      "time: 0.036 seconds\n"
=======
      "GPR score: 0.652\n",
      "time: 0.049 seconds\n",
      "-----------------\n",
      "Training PC # 4\n",
      "GPR score: 0.515\n",
      "time: 0.063 seconds\n"
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "/home/td115/.local/lib/python3.10/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 4 of parameter k1__k2__length_scale is close to the specified upper bound 30.000000000000004. Increasing the bound and calling fit again may find a better value.\n",
||||||| 6127868
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 3 of parameter k1__k2__length_scale is close to the specified upper bound 105.0. Increasing the bound and calling fit again may find a better value.\n",
=======
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 0 of parameter k1__k2__length_scale is close to the specified upper bound 280.0. Increasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 3 of parameter k1__k2__length_scale is close to the specified upper bound 235.0. Increasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 0 of parameter k1__k2__length_scale is close to the specified upper bound 280.0. Increasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:420: ConvergenceWarning: The optimal value found for dimension 1 of parameter k1__k2__length_scale is close to the specified lower bound 0.5599999999999999. Decreasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 2 of parameter k1__k2__length_scale is close to the specified upper bound 43.99999999999999. Increasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 0 of parameter k1__k2__length_scale is close to the specified upper bound 280.0. Increasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 2 of parameter k1__k2__length_scale is close to the specified upper bound 43.99999999999999. Increasing the bound and calling fit again may find a better value.\n",
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
      "  warnings.warn(\n",
<<<<<<< HEAD
      "/home/td115/.local/lib/python3.10/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 2 of parameter k1__k2__length_scale is close to the specified upper bound 43.99999999999999. Increasing the bound and calling fit again may find a better value.\n",
||||||| 6127868
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 0 of parameter k1__k2__length_scale is close to the specified upper bound 290.0. Increasing the bound and calling fit again may find a better value.\n",
=======
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 0 of parameter k1__k2__length_scale is close to the specified upper bound 280.0. Increasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 1 of parameter k1__k2__length_scale is close to the specified upper bound 280.0. Increasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:430: ConvergenceWarning: The optimal value found for dimension 2 of parameter k1__k2__length_scale is close to the specified upper bound 43.99999999999999. Increasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n",
      "/home/tianyu/.local/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:420: ConvergenceWarning: The optimal value found for dimension 3 of parameter k1__k2__length_scale is close to the specified lower bound 0.47000000000000003. Decreasing the bound and calling fit again may find a better value.\n",
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "EMU = path+'/data/running_coupling/emulators.dat'\n",
    "Emulators=[]\n",
    "for i in range(0,Npc):\n",
    "    start_time = time.time()\n",
    "    kernel=1*krnl.RBF(length_scale=design_ptp,\n",
    "                          length_scale_bounds=np.outer(design_ptp, (1./5, 1e2))) + krnl.WhiteKernel(noise_level=.01, \n",
    "                                  noise_level_bounds=(1e-4, 1e4))\n",
    "    print(\"-----------------\")\n",
    "    print(\"Training PC #\",i+1)\n",
    "    GPR=gpr(kernel=kernel,n_restarts_optimizer=0)\n",
    "    GPR.fit(design, pc_tf_data[:,i].reshape(-1,1))\n",
    "    print('GPR score: {:1.3f}'.format(GPR.score(design,pc_tf_data[:,i])) )\n",
    "    print(\"time: {:1.3f} seconds\".format(time.time() - start_time))\n",
    "    Emulators.append(GPR)\n",
    "    \n",
    "with open(EMU, \"wb\") as f:\n",
    "    pickle.dump(Emulators,f)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 16,
||||||| 6127868
   "execution_count": 14,
=======
   "execution_count": null,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "1bc0f9ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "Xdim = 5\n",
    "use_NL = True\n",
    "def predict_observables(model_parameters, diag_std=False):\n",
    "    \"\"\"Predicts the observables for any model parameter value using the trained emulators.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    Theta_input : Model parameter values.\n",
    "    Return\n",
    "    ------\n",
    "    Mean value and full error covaraiance matrix of the prediction is returened. \"\"\"\n",
    "\n",
    "    mean=[]\n",
    "    variance=[]\n",
    "    theta=np.array(model_parameters).flatten()\n",
    "    if len(theta)!=Xdim:\n",
    "        raise TypeError('The input model_parameters array does not have the right dimensions')\n",
    "    else: \n",
    "        theta=np.array(theta).reshape(1,Xdim)\n",
    "        for i in range(Npc):\n",
    "            mn,std=Emulators[i].predict(theta, return_std=True)\n",
    "            mean.append(mn)\n",
    "            variance.append(std**2)\n",
    "    mean=np.array(mean).reshape(1,-1)\n",
    "    inverse_transformed_mean = mean@inverse_tf_matrix + np.array(SS.mean_).reshape(1,-1)    \n",
    "    variance_matrix = np.diag(np.array(variance).flatten())\n",
    "    inverse_transformed_variance = np.einsum('ik,kl,lj-> ij', inverse_tf_matrix.T, variance_matrix, inverse_tf_matrix, \n",
    "                                             optimize=False)\n",
    "    if use_NL:\n",
    "        inverse_transformed_mean = inverse_transformed_mean**2\n",
    "        inverse_transformed_variance *= np.outer(2.*inverse_transformed_mean[0]**.5, \n",
    "                                                 2.*inverse_transformed_mean[0]**.5)\n",
    "    if diag_std:\n",
    "        return inverse_transformed_mean[0], np.sqrt(np.diag(inverse_transformed_variance))\n",
    "    else:\n",
    "        return inverse_transformed_mean[0], inverse_transformed_variance\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 17,
||||||| 6127868
   "execution_count": 15,
=======
   "execution_count": null,
>>>>>>> f3eefe9ee346790e60ffcf780c76b9ffdf5dde5d
   "id": "933d087e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_validation = np.array([[0, 0, 0.3, 1.6, 0.25]])\n",
    "\n",
    "# Next, get the emulator prediction and uncertainty\n",
    "A = np.array([predict_observables(it, diag_std=True) for it in X_validation])\n",
    "Y_predicted = A[:,0,:]\n",
    "Y_std = A[:,1,:]\n",
    "np.savetxt(path+'/data/running_coupling/data_predicted', Y_predicted)\n",
    "np.savetxt(path+'/data/running_coupling/data_predicted_err', Y_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe161fe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "pT1 = np.array([8.25, 8.75, 9.25, 9.75, 11, 13, 15, 17, 19])\n",
    "Nc1 = 9\n",
    "pT3 = np.array([10.75, 12.35, 14.15, 16.2, 18.6, 21.35, 24.45, 28.05, 33.85, 42.6, 53.65, 67.55, 85.05, 106.9, 134.5])\n",
    "Nc2 = 9 + Nc1\n",
    "pT2 = np.array([8.25, 8.75, 9.25, 9.75, 11, 13, 15, 17, 19])\n",
    "Nc3 = 15 + Nc2\n",
    "pT4 = np.array([10.75, 12.35, 14.15, 16.2, 18.6, 21.35, 24.45, 28.05, 33.85, 42.6, 53.65, 67.55, 85.05, 106.9])\n",
    "Nc4 = 14 + Nc3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf7ec7d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_validation = np.array([np.loadtxt(path+'/data/running_coupling/data_val_4obs')])\n",
    "Y_validation_err = np.array([np.loadtxt(path+'/data/running_coupling/data_val_err_4obs')])\n",
    "print(Y_validation.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af7550df",
   "metadata": {},
   "outputs": [],
   "source": [
    "param_samp = np.array([[-0.8, 0., 2.], [-0.8, 0., 2.], [0.16, 0.3, 0.6], [1.15, 1.6, 3.5], [0.1, 0.25, 0.4]])\n",
    "ParameterLabels = ['$\\\\beta_1$', '$\\\\beta_2$', '$T^*$', '$Q_0$', '$\\\\alpha^{inel}_{s, hard}$']\n",
    "colors = ['r', 'b', 'g']\n",
    "\n",
    "fig, axes = plt.subplots(5,4, figsize=(16,16))\n",
    "fig.subplots_adjust(hspace=0, wspace=0)\n",
    "labels = r\"$R_{AA}$\"\n",
    "\n",
    "for i, color in enumerate(colors): \n",
    "    X_validation = np.array([param_samp.T[1]])\n",
    "\n",
    "    \n",
    "    for j, param_label in enumerate(ParameterLabels): \n",
    "        X_validation[0, j] = param_samp[j, i]\n",
    "        A = np.array([predict_observables(it, diag_std=True) for it in X_validation])\n",
    "        Y_predicted = A[:,0,:]\n",
    "        Y_std = A[:,1,:]\n",
    "        for k, (mean, std) in enumerate(zip(Y_predicted, Y_std)):\n",
    "            label = param_label+'=%.2f' %param_samp[j, i]\n",
    "            axes[j, 0].fill_between(pT1,mean[:Nc1]-std[:Nc1],mean[:Nc1]+std[:Nc1],color=color,alpha=.2, label=label)\n",
    "        for k, (mean, std) in enumerate(zip(Y_predicted, Y_std)):\n",
    "            label = param_label+'=%.2f' %param_samp[j, i]\n",
    "            axes[j, 1].fill_between(pT2,mean[Nc1:Nc2]-std[Nc1:Nc2],mean[Nc1:Nc2]+std[Nc1:Nc2],color=color,alpha=.2, label=label)\n",
    "        for k, (mean, std) in enumerate(zip(Y_predicted, Y_std)):\n",
    "            label = param_label+'=%.2f' %param_samp[j, i]\n",
    "            axes[j, 2].fill_between(pT3,mean[Nc2:Nc3]-std[Nc2:Nc3],mean[Nc2:Nc3]+std[Nc2:Nc3],color=color,alpha=.2, label=label)\n",
    "        for k, (mean, std) in enumerate(zip(Y_predicted, Y_std)):\n",
    "            label = param_label+'=%.2f' %param_samp[j, i]\n",
    "            axes[j, 3].fill_between(pT4,mean[Nc3:Nc4]-std[Nc3:Nc4],mean[Nc3:Nc4]+std[Nc3:Nc4],color=color,alpha=.2, label=label)\n",
    "            \n",
    "        # label = 'Model calc.' if i == 0 else ''\n",
    "        axes[j, 0].errorbar(pT1, Y_validation[0][:Nc1], Y_validation_err[0][:Nc1], color='black')\n",
    "        axes[j, 1].errorbar(pT2, Y_validation[0][Nc1:Nc2], Y_validation_err[0][Nc1:Nc2], color='black')\n",
    "        axes[j, 2].errorbar(pT3, Y_validation[0][Nc2:Nc3], Y_validation_err[0][Nc2:Nc3], color='black')\n",
    "        axes[j, 3].errorbar(pT4, Y_validation[0][Nc3:Nc4], Y_validation_err[0][Nc3:Nc4], color='black')\n",
    "        # axes[j, 0].set_xlabel(\"$p_T$ (GeV)\")\n",
    "        axes[j, 0].set_ylabel(labels)\n",
    "        axes[j, 0].legend()\n",
    "        axes[j, 0].set_ylim(0, 1.5)\n",
    "        axes[j, 0].set_xlim(8.25, 19)\n",
    "        # axes[j, 1].set_xlabel(\"$p_T$ (GeV)\")\n",
    "        # axes[j, 1].set_ylabel(labels)\n",
    "        axes[j, 1].legend()\n",
    "        axes[j, 1].set_ylim(0, 1.5)\n",
    "        axes[j, 1].set_xlim(8.25, 19)\n",
    "        # axes[j, 2].set_xlabel(\"$p_T$ (GeV)\")\n",
    "        # axes[j, 2].set_ylabel(labels)\n",
    "        axes[j, 2].legend()\n",
    "        axes[j, 2].set_ylim(0, 1.5)\n",
    "        axes[j, 2].set_xlim(10.75, 106.9)\n",
    "        # axes[j, 3].set_xlabel(\"$p_T$ (GeV)\")\n",
    "        # axes[j, 3].set_ylabel(labels)\n",
    "        axes[j, 3].legend()\n",
    "        axes[j, 3].set_ylim(0, 1.5)\n",
    "        axes[j, 3].set_xlim(10.75, 106.9)\n",
    "        # axes[j, 0].tick_params(axis='y', which='both', labelleft=False)\n",
    "        axes[j, 1].tick_params(axis='y', which='both', labelleft=False)\n",
    "        axes[j, 2].tick_params(axis='y', which='both', labelleft=False)\n",
    "        axes[j, 3].tick_params(axis='y', which='both', labelleft=False)\n",
    "        axes[j, 0].tick_params(direction=\"in\", which='both')\n",
    "        axes[j, 1].tick_params(direction=\"in\", which='both')\n",
    "        axes[j, 2].tick_params(direction=\"in\", which='both')\n",
    "        axes[j, 3].tick_params(direction=\"in\", which='both')\n",
    "axes[4, 0].set_xlabel(\"$p_T$ (GeV)\")\n",
    "axes[4, 1].set_xlabel(\"$p_T$ (GeV)\")\n",
    "axes[4, 2].set_xlabel(\"$p_T$ (GeV)\")\n",
    "axes[4, 3].set_xlabel(\"$p_T$ (GeV)\")\n",
    "\n",
    "\n",
    "# titles = r\"centrality 40-50%\", r\"centrality 40-50%\"\n",
    "# titles = r\"Au+Au 200GeV, centrality 0-10%\"\n",
    "# for ax, label, title in zip(axes, labels, titles):\n",
    "# axes.set_xlabel(\"$p_T$ (GeV)\")\n",
    "# axes.set_ylabel(labels)\n",
    "# axes.legend()\n",
    "# axes.set_ylim(0, 0.5)\n",
    "axes[0, 0].set_title(r\"Au+Au 200GeV, centrality 0-10%\")\n",
    "axes[0, 1].set_title(r\"Pb+Pb 2760GeV, centrality 0-5%\")\n",
    "axes[0, 2].set_title(r\"Au+Au 200GeV, centrality 20-30%\")\n",
    "axes[0, 3].set_title(r\"Pb+Pb 2760GeV, centrality 30-40%\")\n",
    "\n",
    "# plt.tight_layout(True)\n",
    "plt.savefig(path+\"/plots/running_coupling/Emulator_validation_2pca\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52788eed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Emulator validation\n",
    "np.random.seed(9)\n",
    "# X_validation = design_min + np.random.rand(2, Xdim)*design_ptp\n",
    "# X_validation = np.array([design[0]])\n",
    "# X_validation = np.array([design[0]])\n",
    "\n",
    "# Next, get the emulator prediction and uncertainty\n",
    "X_validation = np.array([[0, 0, 0.3, 1.6, 0.25]])\n",
    "A = np.array([predict_observables(it, diag_std=True) for it in X_validation])\n",
    "Y_predicted = A[:,0,:]\n",
    "Y_std = A[:,1,:]\n",
    "# print(Y_predicted.shape)\n",
    "\n",
    "\n",
    "# Model calculation at these two points\n",
    "# Y_validation = np.array([np.concatenate(ToyModel(param)) for param in X_validation])\n",
    "# print(Y_validation.shape)\n",
    "# Y_validation = np.array([simulation[0]])\n",
    "Y_validation = np.array([np.loadtxt(path+'/data/running_coupling/data_val_4obs')])\n",
    "Y_validation_err = np.array([np.loadtxt(path+'/data/running_coupling/data_val_err_4obs')])\n",
    "# Y_validation_err = np.array([simulation_err[0]])\n",
    "\n",
    "labels = r\"$R_{AA}^{h^\\pm}$\"\n",
    "\n",
    "# plot the prediction + uncertainty band with the true model caluclation\n",
    "fig, axes = plt.subplots(2,2, figsize=(8,5))\n",
    "fig.subplots_adjust(hspace=0, wspace=0)\n",
    "for i, (mean, std) in enumerate(zip(Y_predicted, Y_std)):\n",
    "    label = 'GP emulated' if i==0 else''\n",
    "    axes[0, 0].fill_between(pT1,mean[:Nc1]-std[:Nc1],mean[:Nc1]+std[:Nc1],color='tomato',alpha=.5, label=label)\n",
    "    axes[1, 0].fill_between(pT2,mean[Nc1:Nc2]-std[Nc1:Nc2],mean[Nc1:Nc2]+std[Nc1:Nc2],color='tomato',alpha=.5, label=label)\n",
    "    axes[0, 1].fill_between(pT3,mean[Nc2:Nc3]-std[Nc2:Nc3],mean[Nc2:Nc3]+std[Nc2:Nc3],color='tomato',alpha=.5, label=label)\n",
    "    axes[1, 1].fill_between(pT4,mean[Nc3:Nc4]-std[Nc3:Nc4],mean[Nc3:Nc4]+std[Nc3:Nc4],color='tomato',alpha=.5, label=label)\n",
    "    # axes[1].fill_between(pT,mean[Nc:]-std[Nc:],mean[Nc:]+std[Nc:],color='r',alpha=.5, label=label)\n",
    "for i, ym, ym_err in zip(range(len(Y_validation)), Y_validation, Y_validation_err):\n",
    "    label = 'Model calc.' if i==0 else''\n",
    "    axes[0, 0].errorbar(pT1, ym[:Nc1], yerr=ym_err[:Nc1], label=label)\n",
    "    axes[1, 0].errorbar(pT2, ym[Nc1:Nc2], yerr=ym_err[Nc1:Nc2], label=label)\n",
    "    axes[0, 1].errorbar(pT3, ym[Nc2:Nc3], yerr=ym_err[Nc2:Nc3], label=label)\n",
    "    axes[1, 1].errorbar(pT4, ym[Nc3:Nc4], yerr=ym_err[Nc3:Nc4], label=label)\n",
    "    \n",
    "    # axes[1].errorbar(pT, ym[Nc:], yerr=ym_err[Nc:], label=label)\n",
    "    # axes[0, 0].set_xlabel(\"$p_T$ (GeV)\")\n",
    "    axes[0, 0].set_ylabel(labels)\n",
    "    # axes[0, 0].legend()\n",
    "    axes[0, 0].set_ylim(0, 1.1)\n",
    "    axes[0, 0].set_xlim(8.25, 19)\n",
    "    axes[0, 0].text(9, 0.9, 'Au+Au 200GeV, 0-10% centrality')\n",
    "    axes[1, 0].set_ylabel(labels)\n",
    "    # axes[1, 0].legend()\n",
    "    axes[1, 0].set_ylim(0, 1.1)\n",
    "    axes[1, 0].set_xlim(8.25, 19)\n",
    "    axes[1, 0].set_xlabel(\"$p_T$ (GeV)\")\n",
    "    axes[1, 0].text(9, 0.9, 'Au+Au 200GeV, 20-30% centrality')\n",
    "    # axes[0, 1].set_ylabel(labels)\n",
    "    # axes[0, 1].legend()\n",
    "    axes[0, 1].set_ylim(0, 1.1)\n",
    "    axes[0, 1].set_xlim(10, 106.5)\n",
    "    axes[0, 1].text(15, 0.9, 'Pb+Pb 2760GeV, 0-5% centrality')\n",
    "    # axes[0, 0].set_ylabel(labels)\n",
    "    axes[1, 1].legend(loc='lower right')\n",
    "    axes[1, 1].set_ylim(0, 1.1)\n",
    "    axes[1, 1].set_xlim(10, 106.5)\n",
    "    axes[1, 1].text(15, 0.9, 'Pb+Pb 2760GeV, 30-40% centrality')\n",
    "    axes[1, 1].set_xlabel(\"$p_T$ (GeV)\")\n",
    "    axes[0, 0].tick_params(direction=\"in\", which='both')\n",
    "    axes[1, 0].tick_params(direction=\"in\", which='both')\n",
    "    axes[0, 1].tick_params(direction=\"in\", which='both')\n",
    "    axes[1, 1].tick_params(direction=\"in\", which='both')\n",
    "    axes[0, 1].tick_params(axis='y', which='both', labelleft=False)\n",
    "    axes[1, 1].tick_params(axis='y', which='both', labelleft=False)\n",
    "\n",
    "\n",
    "# Add labels\n",
    "# labels = r\"$R_{AA}$\", r\"$R_{AA}$\", r\"$\"\n",
    "\n",
    "# titles = r\"centrality 40-50%\", r\"centrality 40-50%\"\n",
    "titles = r\"centrality 0-10%\"\n",
    "# for ax, label, title in zip(axes, labels, titles):\n",
    "\n",
    "# axes.set_title(titles)\n",
    "# plt.tight_layout(True)\n",
    "plt.savefig(path+\"/plots/running_coupling/Emulator_validation_test\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91a22cb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# design = np.loadtxt(path+'/data/running_coupling/lhd_sampling_5d.txt')\n",
    "x = np.arange(0., 1.5, 0.001)\n",
    "\n",
    "predicted_combine = []\n",
    "data_combine = []\n",
    "size_list = [9, 9, 15, 14]\n",
    "Nc_list = [0, Nc1, Nc2, Nc3, Nc4]\n",
    "lim_list = [(0.02, 0.8), (0.15, 1), (0.05, 1.1), (0.32, 1.5)]\n",
    "# plt.figure(figsize=(6, 6))\n",
    "label_list = ['$R_{AA}^{h^{\\pm}}$, Au+Au 200GeV, 0-10%', '$R_{AA}^{h^{\\pm}}$, Au+Au 200GeV, 20-30%', '$R_{AA}^{h^{\\pm}}$, Pb+Pb 2760GeV, 0-5%', '$R_{AA}^{h^{\\pm}}$, Pb+Pb 2760GeV, 30-40%']\n",
    "\n",
    "fig, axes = plt.subplots(2,2, figsize=(12, 12),dpi=500)\n",
    "\n",
    "for i in range(len(design)): \n",
    "    design_new = np.concatenate((design[:i], design[i+1:]), axis=0)\n",
    "    Y_model_new = np.concatenate((Y_model[:i], Y_model[i+1:]), axis=0)\n",
    "    \n",
    "    Emulators=[]\n",
    "    pc_tf_data_new = pca.fit_transform(SS.fit_transform(Y_model_new)) [:,:Npc]\n",
    "    for k in range(Npc):\n",
    "        kernel=1*krnl.RBF(length_scale=design_ptp,\n",
    "                          length_scale_bounds=np.outer(design_ptp, (1./5, 1e2))) + krnl.WhiteKernel(noise_level=.01, \n",
    "                                  noise_level_bounds=(1e-4, 1e4))\n",
    "        GPR=gpr(kernel=kernel,n_restarts_optimizer=0)\n",
    "        GPR.fit(design_new, pc_tf_data_new[:,k].reshape(-1,1))\n",
    "        Emulators.append(GPR)\n",
    "        \n",
    "        \n",
    "    mean=[]\n",
    "    theta=np.array(design[i]).flatten()\n",
    "    theta=np.array(theta).reshape(1,Xdim)\n",
    "    for k in range(Npc):\n",
    "        mn=Emulators[k].predict(theta)\n",
    "        mean.append(mn)\n",
    "    mean=np.array(mean).reshape(1,-1)\n",
    "    inverse_transformed_mean = mean@inverse_tf_matrix + np.array(SS.mean_).reshape(1,-1)\n",
    "    inverse_transformed_mean = inverse_transformed_mean**2\n",
    "    A = inverse_transformed_mean[0]\n",
    "    Y_predicted = [A]\n",
    "    \"\"\"\n",
    "    A = np.array([predict_observables(it, diag_std=True) for it in [design[i]]])\n",
    "    Y_predicted = A[:,0,:]\n",
    "    Y_std = A[:,1,:]\n",
    "    # kernel=1*krnl.RBF(length_scale=design_ptp, length_scale_bounds=np.outer(design_ptp, (1./5, 1e2))) + krnl.WhiteKernel(noise_level=.01, noise_level_bounds=(1e-4, 1e4))\n",
    "    # GPR=gpr(kernel=kernel,n_restarts_optimizer=0)\n",
    "    # GPR.fit(design_new, Y_model_new)\n",
    "    # Y_predicted, Y_std = GPR.predict([design[i]], return_std=True)\n",
    "    \"\"\"\n",
    "    predicted_combine.append(Y_predicted[0])\n",
    "    data_combine.append(Y_model[i]**2)\n",
    "    for j, ax, size in zip(range(4), axes.flat, size_list): \n",
    "        t = np.arange(size)\n",
    "        ax.scatter(Y_model[i][Nc_list[j]:Nc_list[j+1]]**2, Y_predicted[0][Nc_list[j]:Nc_list[j+1]], c=t, alpha=0.5, cmap=cm.twilight_shifted)\n",
    "        ax.plot(x, x, color='black')\n",
    "        ax.tick_params(direction=\"in\", which='both')\n",
    "        ax.set_xlim(lim_list[j])\n",
    "        ax.set_ylim(lim_list[j])\n",
    "        ax.text(lim_list[j][0]+0.05, lim_list[j][1]-0.1, label_list[j])\n",
    "        ax.set_xlabel('model calculation')\n",
    "        ax.set_ylabel('emulator prediction')\n",
    "plt.savefig(path+'/plots/running_coupling/model-emulator')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d7e8014",
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_combine = np.array(predicted_combine)\n",
    "data_combine = np.array(data_combine)\n",
    "print(data_combine.shape)\n",
    "diff_combine_1 = []\n",
    "diff_combine_2 = []\n",
    "diff_combine_3 = []\n",
    "diff_combine_4 = []\n",
    "\n",
    "for i in range(len(predicted_combine)): \n",
    "    for j in range(Nc1): \n",
    "        diff_combine_1.append((predicted_combine[i, j] - data_combine[i, j]) / data_combine[i, j])\n",
    "    for j in range(Nc1, Nc2): \n",
    "        diff_combine_2.append((predicted_combine[i, j] - data_combine[i, j]) / data_combine[i, j])\n",
    "    for j in range(Nc2, Nc3): \n",
    "        diff_combine_3.append((predicted_combine[i, j] - data_combine[i, j]) / data_combine[i, j])\n",
    "    for j in range(Nc3, Nc4): \n",
    "        diff_combine_4.append((predicted_combine[i, j] - data_combine[i, j]) / data_combine[i, j])\n",
    "\n",
    "bins = np.arange(-0.1, 0.1, 0.02)\n",
    "\n",
    "plt.figure(figsize=(7, 5))\n",
    "plt.hist(diff_combine_1, bins=20, histtype='step', color=sns.color_palette(\"Set2\")[0], label='$R_{AA}^{h^{\\pm}}$, Au+Au, 0-10%', density=True)\n",
    "plt.hist(diff_combine_2, bins=20, histtype='step', color=sns.color_palette(\"Set2\")[1], label='$R_{AA}^{h^{\\pm}}$, Au+Au, 20-30%', density=True)\n",
    "plt.hist(diff_combine_3, bins=20, histtype='step', color=sns.color_palette(\"Set2\")[2], label='$R_{AA}^{h^{\\pm}}$, Pb+Pb, 0-5%', density=True)\n",
    "plt.hist(diff_combine_4, bins=20, histtype='step', color=sns.color_palette(\"Set2\")[3], label='$R_{AA}^{h^{\\pm}}$, Pb+Pb, 30-40%', density=True)\n",
    "plt.axvline(x=0., color='k')\n",
    "plt.xlim(-0.5, 0.5)\n",
    "plt.legend()\n",
    "plt.xlabel('(emulator - model) / model')\n",
    "plt.tick_params(direction=\"in\", which='both')\n",
    "plt.savefig(path+'/plots/running_coupling/emulator_dist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f5eb164",
   "metadata": {},
   "outputs": [],
   "source": [
    "ParameterLabels = ['$\\\\beta_1$', '$\\\\beta_2$', '$T^*$', '$Q_0$', '$g^{inel}_{hard}$']\n",
    "ranges = np.array([[-0.8, 2], [-0.8, 2], [0.16, 0.6], [1.15, 3.5], [0.1, 0.4]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a87c58db",
   "metadata": {},
   "outputs": [],
   "source": [
    "def log_prior(model_parameters):\n",
    "    \"\"\"Evaluvate the prior at model prameter values. \n",
    "    If all parameters are inside bounds function will return 0 otherwise -inf\"\"\"\n",
    "    X = np.array(model_parameters).reshape(1,-1)\n",
    "    lower = np.all(X >= design_min)\n",
    "    upper = np.all(X <= design_max)\n",
    "    if (lower and upper):\n",
    "        lp=0\n",
    "    # lp = np.log(st.beta.pdf(X,5,1,dsgn_min_ut.reshape(1,-1),(dsgn_max_ut-dsgn_min_ut).reshape(1,-1))).sum()\n",
    "    else:\n",
    "        lp = -np.inf\n",
    "    return lp\n",
    "\n",
    "def mvn_loglike(y, cov):\n",
    "    \"\"\"\n",
    "    Evaluate the multivariate-normal log-likelihood for difference vector `y`\n",
    "    and covariance matrix `cov`:\n",
    "\n",
    "        log_p = -1/2*[(y^T).(C^-1).y + log(det(C))] + const.\n",
    "\n",
    "    The likelihood is NOT NORMALIZED, since this does not affect MCMC.  The\n",
    "    normalization const = -n/2*log(2*pi), where n is the dimensionality.\n",
    "\n",
    "    Arguments `y` and `cov` MUST be np.arrays with dtype == float64 and shapes\n",
    "    (n) and (n, n), respectively.  These requirements are NOT CHECKED.\n",
    "\n",
    "    The calculation follows algorithm 2.1 in Rasmussen and Williams (Gaussian\n",
    "    Processes for Machine Learning).\n",
    "\n",
    "    \"\"\"\n",
    "    # Compute the Cholesky decomposition of the covariance.\n",
    "    # Use bare LAPACK function to avoid scipy.linalg wrapper overhead.\n",
    "    L, info = lapack.dpotrf(cov, clean=False)\n",
    "\n",
    "    if info < 0:\n",
    "        raise ValueError(\n",
    "            'lapack dpotrf error: '\n",
    "            'the {}-th argument had an illegal value'.format(-info)\n",
    "        )\n",
    "    elif info < 0:\n",
    "        raise np.linalg.LinAlgError(\n",
    "            'lapack dpotrf error: '\n",
    "            'the leading minor of order {} is not positive definite'\n",
    "            .format(info)\n",
    "        )\n",
    "\n",
    "    # Solve for alpha = cov^-1.y using the Cholesky decomp.\n",
    "    alpha, info = lapack.dpotrs(L, y)\n",
    "\n",
    "    if info != 0:\n",
    "        raise ValueError(\n",
    "            'lapack dpotrs error: '\n",
    "            'the {}-th argument had an illegal value'.format(-info)\n",
    "         )\n",
    "\n",
    "    if np.all(L.diagonal()>0):\n",
    "        return -.5*np.dot(y, alpha) - np.log(L.diagonal()).sum()\n",
    "    else:\n",
    "        return -.5*np.dot(y, alpha) - np.log(np.abs(L.diagonal())).sum()\n",
    "        print(L.diagonal())\n",
    "        raise ValueError(\n",
    "            'L has negative values on diagonal {}'.format(L.diagonal())\n",
    "        )\n",
    "\n",
    "def log_posterior(model_parameters):\n",
    "    model_parameters = np.array([model_parameters[0], model_parameters[1], model_parameters[2], 1.75, model_parameters[3]])\n",
    "    mn, var = predict_observables(model_parameters)\n",
    "    delta_y = mn - y_exp\n",
    "    delta_y = delta_y.flatten()   \n",
    "    total_var = var + y_exp_variance\n",
    "    return log_prior(model_parameters) + mvn_loglike(delta_y,total_var)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7f691a7",
   "metadata": {},
   "source": [
    "# Closure Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f744017b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# validate with true values\n",
    "# y_exp = np.loadtxt(path+'/data/true_RAA')\n",
    "# y_exp_err = np.loadtxt(path+'/data/true_RAA_err')\n",
    "# y_exp_variance = np.diag(y_exp_err**2)\n",
    "y_exp = np.loadtxt(path+'/data/running_coupling/data_val_4obs')\n",
    "y_exp_err = np.loadtxt(path+'/data/running_coupling/data_val_err_4obs')\n",
    "y_exp_variance = np.diag(y_exp_err**2)\n",
    "\n",
    "# print(y_err.shape)\n",
    "# y_exp = simulation[7]\n",
    "# y_err = np.loadtxt(path+'/data/RAA_data_err')\n",
    "# y_exp_variance = np.diag(y_err**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1a4524c",
   "metadata": {},
   "source": [
    "## Reduce parameter dim to 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90739bd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_max = np.array([1., 1., 0.6, 0.4])\n",
    "test_min = np.array([-0.9, -0.9, 0.16, 0.1])\n",
    "test_ptp = test_max - test_min\n",
    "\n",
    "test_dim = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c0bc6e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "nwalkers = 20*test_dim  # number of MCMC walkers\n",
    "nburn = 1000 # \"burn-in\" period to let chains stabilize\n",
    "nsteps = 5000  # number of MCMC steps to take\n",
    "# filename = data_path(name+\".h5\")\n",
    "\n",
    "\n",
    "#backend = emcee.backends.HDFBackend(filename)\n",
    "starting_guesses = test_min + (test_max - test_min) * np.random.rand(nwalkers, test_dim)\n",
    "\n",
    "#print(starting_guesses)\n",
    "print(\"MCMC sampling using emcee (affine-invariant ensamble sampler) with {0} walkers\".format(nwalkers))\n",
    "with Pool() as pool:\n",
    "    sampler = emcee.EnsembleSampler(nwalkers, test_dim, log_posterior)\n",
    "    print('burn in sampling started')    \n",
    "    pos = sampler.run_mcmc(starting_guesses, nburn, progress=True, store=True)\n",
    "    print(\"Mean acceptance fraction: {0:.3f} (in total {1} steps)\".format(\n",
    "                        np.mean(sampler.acceptance_fraction), nwalkers*nburn))\n",
    "    print('Burn in completed.')\n",
    "    print(\"Now running the samples\")\n",
    "    sampler.run_mcmc(initial_state=None, nsteps=nsteps, progress=True, tune=False)  \n",
    "    print(\"Mean acceptance fraction: {0:.3f} (in total {1} steps)\".format(\n",
    "                        np.mean(sampler.acceptance_fraction), nwalkers*nsteps))\n",
    "        \n",
    "    # discard burn-in points and flatten the walkers; the shape of samples is (nwalkers*nsteps, Xdim)\n",
    "    #samples = backend.get_chain(flat=True, discard=nburn)\n",
    "    samples = sampler.get_chain(flat=True, discard=nburn)\n",
    "\n",
    "# n_samples = len(samples)\n",
    "# samples = np.concatenate((np.array([samples.T[0]]), np.array([samples.T[0]]), np.array([samples.T[1:3]]), np.array([[2 for _ in range(n_samples)]]), np.array([samples.T[3]])), axis=-1)\n",
    "# print(samples.shape)\n",
    "\n",
    "np.savetxt(path+'/data/running_coupling/MCMC_test_samples', samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b668c72",
   "metadata": {},
   "outputs": [],
   "source": [
    "bounds=[(a,b) for (a,b) in zip(test_min,test_max)]\n",
    "parameters0 = optimize.differential_evolution(lambda x: -log_posterior(x), \n",
    "                                    bounds=bounds,\n",
    "                                    tol=1e-9,\n",
    "                                    ).x\n",
    "parameters1 = [np.percentile(it,50) for it in samples.T]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82457c13",
   "metadata": {},
   "outputs": [],
   "source": [
    "true_values = np.array([0., 0., 0.3, 0.25])\n",
    "# true_values = design[7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "199e0fe6",
   "metadata": {},
   "outputs": [],
   "source": [
    "ParameterLabels = ['$\\\\beta_\\perp$', '$\\\\beta_\\parallel$', '$T^*$',  '$\\\\alpha^{inel}_{s, hard}$']\n",
    "ranges = np.array([[-0.9, 1], [-0.9, 1], [0.16, 0.6], [0.1, 0.4]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec608f6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "samples_df = pd.DataFrame(samples, columns=ParameterLabels)\n",
    "g = sns.PairGrid(samples_df.iloc[:,:], corner=True, diag_sharey=False)\n",
    "g.map_lower(sns.histplot, bins=100, color=sns.color_palette()[9])\n",
    "g.map_diag(sns.kdeplot, linewidth=2, shade=True, color=sns.color_palette()[-1])\n",
    "for n in range(test_dim):\n",
    "    ax=g.axes[n][n]\n",
    "    ax.axvline(x=parameters0[n], ls='-', c=sns.color_palette()[9], label='MAP')\n",
    "    # ax.axvline(x=parameters1[n], ls='-', c=sns.color_palette()[0], label='central')\n",
    "    ax.axvline(x=true_values[n], ls='-', c=sns.color_palette()[3], label='Truth')\n",
    "    ax.text(0,0.9,s= f'{parameters0[n]:.2f}', transform=ax.transAxes, color=sns.color_palette()[9], fontsize=12)\n",
    "    # ax.text(0,0.8,s= f'{parameters1[n]:.2f}', transform=ax.transAxes, color=sns.color_palette()[0], fontsize=12)\n",
    "    ax.text(0,0.7,s= f'{true_values[n]:.2f}', transform=ax.transAxes, color=sns.color_palette()[3], fontsize=12)\n",
    "g.axes[2,2].legend(loc='upper right', fontsize=10)\n",
    "for i in range(test_dim):\n",
    "    for j in range(i+1):\n",
    "        g.axes[i,j].set_xlim(*ranges[j])\n",
    "        if i==j:\n",
    "            g.axes[i,j].set_ylim(*ranges[i])\n",
    "            \n",
    "        else:\n",
    "            g.axes[i,j].set_ylim(ymax=0)\n",
    "            g.axes[i,j].axvline(x=parameters0[j], ls='-', c=sns.color_palette()[9])\n",
    "            # g.axes[i,j].axvline(x=parameters1[j], ls='-', c=sns.color_palette()[0])\n",
    "            g.axes[i,j].axvline(x=true_values[j], ls='-', c=sns.color_palette()[3])\n",
    "            g.axes[i,j].axhline(y=parameters0[i], ls='-', c=sns.color_palette()[9])\n",
    "            # g.axes[i,j].axhline(y=parameters1[i], ls='-', c=sns.color_palette()[0])\n",
    "            g.axes[i,j].axhline(y=true_values[i], ls='-', c=sns.color_palette()[3])\n",
    "            g.axes[i,j].scatter(parameters0[j], parameters0[i], color=sns.color_palette()[9])\n",
    "            # g.axes[i,j].scatter(parameters1[j], parameters1[i], color=sns.color_palette()[0])\n",
    "            g.axes[i,j].scatter(true_values[j], true_values[i], color=sns.color_palette()[3])\n",
    "plt.tight_layout()\n",
    "plt.savefig(path+'/plots/running_coupling/Posterior_of_true_parameters_pca4_param4_obs4_dps32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3130fa27",
   "metadata": {},
   "outputs": [],
   "source": [
    "Nsamples = 100\n",
    "Nthin = samples_df.size//Nsamples\n",
    "# prior parameter samples\n",
    "prior_params = (ranges[:,1]-ranges[:,0])*np.random.rand(Nsamples,test_dim) + ranges[:,0]\n",
    "# posterior parameter samples \n",
    "posterior_params =  samples_df.iloc[::Nthin,:].values\n",
    "prior_params = np.concatenate((np.array([prior_params.T[0]]).T, prior_params.T[1:3].T, np.array([[1.6 for _ in range(Nsamples)]]).T, np.array([prior_params.T[3]]).T), axis=1)\n",
    "posterior_params = np.concatenate((np.array([posterior_params.T[0]]).T, posterior_params.T[1:3].T, np.array([[1.6 for _ in range(len(posterior_params))]]).T, np.array([posterior_params.T[3]]).T), axis=1)\n",
    "\n",
    "prior_obs = []\n",
    "posterior_obs = []\n",
    "\n",
    "for p in prior_params: \n",
    "    A = np.array([predict_observables(p, diag_std=True)])\n",
    "    Y_predicted = A[:,0,:]\n",
    "    # prior_obs = np.array([np.concatenate(Y_predicted)])\n",
    "    prior_obs.append(list(Y_predicted[0]))\n",
    "\n",
    "for p in posterior_params: \n",
    "    A = np.array([predict_observables(p, diag_std=True)])\n",
    "    Y_predicted = A[:,0,:]\n",
    "    posterior_obs.append(list(Y_predicted[0]))\n",
    "    \n",
    "prior_obs = np.array(prior_obs)\n",
    "posterior_obs = np.array(posterior_obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0b18237",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(2,4, figsize=(16,8))\n",
    "fig.subplots_adjust(hspace=0, wspace=0)\n",
    "CLbins = [95]\n",
    "for isample, ilabel, color in zip([prior_obs, posterior_obs], \n",
    "                               ['prior','posterior'], \n",
    "                               [sns.color_palette()[0], sns.color_palette()[3]]):\n",
    "    for CL, opacity in zip(CLbins, [.35, .3, .25, .2]):\n",
    "        label = '{:d}% {}'.format(CL, ilabel)\n",
    "        lower, upper = np.percentile(isample, [50-CL/2., 50+CL/2.], axis=0)\n",
    "        axes[0, 0].fill_between(pT1, lower[:Nc1], upper[:Nc1], color=color, alpha=opacity, label=label)\n",
    "        axes[0, 1].fill_between(pT2, lower[Nc1:Nc2], upper[Nc1:Nc2], color=color, alpha=opacity, label=label)\n",
    "        axes[0, 2].fill_between(pT3, lower[Nc2:Nc3], upper[Nc2:Nc3], color=color, alpha=opacity, label=label)\n",
    "        axes[0, 3].fill_between(pT4, lower[Nc3:Nc4], upper[Nc3:Nc4], color=color, alpha=opacity, label=label)\n",
    "        axes[1, 0].fill_between(pT1, (lower/y_exp)[:Nc1], (upper/y_exp)[:Nc1], color=color, alpha=opacity, label=label)\n",
    "        axes[1, 1].fill_between(pT2, (lower/y_exp)[Nc1:Nc2], (upper/y_exp)[Nc1:Nc2], color=color, alpha=opacity, label=label)\n",
    "        axes[1, 2].fill_between(pT3, (lower/y_exp)[Nc2:Nc3], (upper/y_exp)[Nc2:Nc3], color=color, alpha=opacity, label=label)\n",
    "        axes[1, 3].fill_between(pT4, (lower/y_exp)[Nc3:Nc4], (upper/y_exp)[Nc3:Nc4], color=color, alpha=opacity, label=label)\n",
    "\n",
    "for i, ax,y,yerr,name, pT in zip(range(4), axes[0], \n",
    "                    [y_exp[:Nc1], y_exp[Nc1:Nc2], y_exp[Nc2:Nc3], y_exp[Nc3:Nc4]], [y_exp_err[:Nc1], y_exp_err[Nc1:Nc2], y_exp_err[Nc2:Nc3], y_exp_err[Nc3:Nc4]], \n",
    "                    [r\"$R_{\\rm AA}$\"]*4, [pT1, pT2, pT3, pT4]):\n",
    "\n",
    "    ax.errorbar(pT, y, yerr=yerr, fmt='k.', label='valid')\n",
    "    if i == 0:\n",
    "        ax.set_ylabel(r\"$R_{\\rm AA}$\")\n",
    "    # ax.set_xlabel(\"pT (GeV)\")\n",
    "\n",
    "for i, ax,y,yerr,name, pT in zip(range(4), axes[1], \n",
    "                    [y_exp[:Nc1], y_exp[Nc1:Nc2], y_exp[Nc2:Nc3], y_exp[Nc3:Nc4]],[y_exp_err[:Nc1], y_exp_err[Nc1:Nc2], y_exp_err[Nc2:Nc3], y_exp_err[Nc3:Nc4]],\n",
    "                    [\"Ratio to data\"]*4, [pT1, pT2, pT3, pT4]):\n",
    "    ax.errorbar(pT, y/y, yerr=yerr/y, fmt='k.', label='valid')\n",
    "    ax.axhline(y=1, ls='-', color='k')\n",
    "    if i == 0: \n",
    "        ax.set_ylabel(\"Ratio to data\")\n",
    "    ax.set_xlabel(\"pT (GeV)\")\n",
    "# axes[0,0].semilogy()\n",
    "# axes[0,1].semilogy()\n",
    "axes[0, 0].set_ylim(0,1.8)\n",
    "axes[0, 1].set_ylim(0,1.8)\n",
    "axes[0, 2].set_ylim(0,1.8)\n",
    "axes[0, 3].set_ylim(0,1.8)\n",
    "axes[1, 0].set_ylim(0,2)\n",
    "axes[1, 1].set_ylim(0,2)\n",
    "axes[1, 2].set_ylim(0,2)\n",
    "axes[1, 3].set_ylim(0,2)\n",
    "axes[0, 0].set_title('Au+Au 200 GeV, 0-10%', fontsize=16)\n",
    "axes[0, 1].set_title('Pb+Pb 2760 GeV, 0-5%', fontsize=16)\n",
    "axes[0, 2].set_title('Au+Au 200 GeV, 20-30%', fontsize=16)\n",
    "axes[0, 3].set_title('Pb+Pb 2760 GeV, 30-40%', fontsize=16)\n",
    "axes[0, 0].legend(prop={'size': 12})\n",
    "axes[0, 1].legend(prop={'size': 12})\n",
    "axes[0, 2].legend(prop={'size': 12})\n",
    "axes[0, 3].legend(prop={'size': 12})\n",
    "axes[0, 1].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[0, 2].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[0, 3].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[1, 1].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[1, 2].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[1, 3].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[0, 0].tick_params(direction=\"in\", which='both')\n",
    "axes[0, 1].tick_params(direction=\"in\", which='both')\n",
    "axes[0, 2].tick_params(direction=\"in\", which='both')\n",
    "axes[0, 3].tick_params(direction=\"in\", which='both')\n",
    "axes[1, 0].tick_params(direction=\"in\", which='both')\n",
    "axes[1, 1].tick_params(direction=\"in\", which='both')\n",
    "axes[1, 2].tick_params(direction=\"in\", which='both')\n",
    "axes[1, 3].tick_params(direction=\"in\", which='both')\n",
    "\n",
    "# plt.legend(loc='upper center', bbox_to_anchor=(0, -0.1), fancybox=True, shadow=True, ncol=3)\n",
    "# plt.tight_layout()\n",
    "plt.savefig(path+\"/plots/running_coupling/Posterior_validation_pca2_param4\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3431961e",
   "metadata": {},
   "source": [
    "# Data analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20ac99ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "def log_prior(model_parameters):\n",
    "    \"\"\"Evaluvate the prior at model prameter values. \n",
    "    If all parameters are inside bounds function will return 0 otherwise -inf\"\"\"\n",
    "    X = np.array(model_parameters).reshape(1,-1)\n",
    "    lower = np.all(X >= design_min)\n",
    "    upper = np.all(X <= design_max)\n",
    "    if (lower and upper):\n",
    "        lp=0\n",
    "    # lp = np.log(st.beta.pdf(X,5,1,dsgn_min_ut.reshape(1,-1),(dsgn_max_ut-dsgn_min_ut).reshape(1,-1))).sum()\n",
    "    else:\n",
    "        lp = -np.inf\n",
    "    return lp\n",
    "\n",
    "def mvn_loglike(y, cov):\n",
    "    \"\"\"\n",
    "    Evaluate the multivariate-normal log-likelihood for difference vector `y`\n",
    "    and covariance matrix `cov`:\n",
    "\n",
    "        log_p = -1/2*[(y^T).(C^-1).y + log(det(C))] + const.\n",
    "\n",
    "    The likelihood is NOT NORMALIZED, since this does not affect MCMC.  The\n",
    "    normalization const = -n/2*log(2*pi), where n is the dimensionality.\n",
    "\n",
    "    Arguments `y` and `cov` MUST be np.arrays with dtype == float64 and shapes\n",
    "    (n) and (n, n), respectively.  These requirements are NOT CHECKED.\n",
    "\n",
    "    The calculation follows algorithm 2.1 in Rasmussen and Williams (Gaussian\n",
    "    Processes for Machine Learning).\n",
    "\n",
    "    \"\"\"\n",
    "    # Compute the Cholesky decomposition of the covariance.\n",
    "    # Use bare LAPACK function to avoid scipy.linalg wrapper overhead.\n",
    "    L, info = lapack.dpotrf(cov, clean=False)\n",
    "\n",
    "    if info < 0:\n",
    "        raise ValueError(\n",
    "            'lapack dpotrf error: '\n",
    "            'the {}-th argument had an illegal value'.format(-info)\n",
    "        )\n",
    "    elif info < 0:\n",
    "        raise np.linalg.LinAlgError(\n",
    "            'lapack dpotrf error: '\n",
    "            'the leading minor of order {} is not positive definite'\n",
    "            .format(info)\n",
    "        )\n",
    "\n",
    "    # Solve for alpha = cov^-1.y using the Cholesky decomp.\n",
    "    alpha, info = lapack.dpotrs(L, y)\n",
    "\n",
    "    if info != 0:\n",
    "        raise ValueError(\n",
    "            'lapack dpotrs error: '\n",
    "            'the {}-th argument had an illegal value'.format(-info)\n",
    "         )\n",
    "\n",
    "    if np.all(L.diagonal()>0):\n",
    "        return -.5*np.dot(y, alpha) - np.log(L.diagonal()).sum()\n",
    "    else:\n",
    "        return -.5*np.dot(y, alpha) - np.log(np.abs(L.diagonal())).sum()\n",
    "        print(L.diagonal())\n",
    "        raise ValueError(\n",
    "            'L has negative values on diagonal {}'.format(L.diagonal())\n",
    "        )\n",
    "\n",
    "def log_posterior(model_parameters):\n",
    "    \"\"\"\n",
    "    model_parameters = np.array([model_parameters[0], model_parameters[1], model_parameters[2], 2.1, model_parameters[3]])\n",
    "    mn1, var1 = predict_observables(model_parameters)\n",
    "    model_parameter_2 = model_parameters\n",
    "    model_parameter_2[3] *= 1.151589045\n",
    "    mn2, var2 = predict_observables(model_parameter_2)\n",
    "    model_parameter_3 = model_parameters\n",
    "    model_parameter_3[3] *= 0.7194298318\n",
    "    mn3, var3 = predict_observables(model_parameter_3)\n",
    "    model_parameter_4 = model_parameters\n",
    "    model_parameter_4[3] *= 0.8473325979\n",
    "    mn4, var4 = predict_observables(model_parameter_4)\n",
    "    \n",
    "    mn = np.concatenate((mn1[:Nc1], mn2[Nc1:Nc2], mn3[Nc2:Nc3], mn4[Nc3:]))\n",
    "    var = np.concatenate((var1[:Nc1], var2[Nc1:Nc2], var3[Nc2:Nc3], var4[Nc3:]))\n",
    "    \"\"\"\n",
    "    # model_parameters = np.array([model_parameters[0], model_parameters[1], model_parameters[2], 1.8, model_parameters[3]])\n",
    "    mn, var = predict_observables(model_parameters)\n",
    "    delta_y = mn - y_exp\n",
    "    delta_y = delta_y.flatten()   \n",
    "    total_var = var + y_exp_variance\n",
    "    return log_prior(model_parameters) + mvn_loglike(delta_y,total_var)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b2dce91",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_exp = np.loadtxt(path+'/data/running_coupling/data_exp_4obs')\n",
    "y_exp_err = np.loadtxt(path+'/data/running_coupling/data_exp_err_4obs')\n",
    "y_exp_variance = np.diag(y_exp_err**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3d2415d",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_max = np.array([2., 2., 0.6, 2.5, 0.4])\n",
    "test_min = np.array([-0.9, -0.9, 0.16, 1.45, 0.1])\n",
    "test_ptp = test_max - test_min\n",
    "\n",
    "test_dim = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db3be276",
   "metadata": {},
   "outputs": [],
   "source": [
    "nwalkers = 20*test_dim  # number of MCMC walkers\n",
    "nburn = 1000 # \"burn-in\" period to let chains stabilize\n",
    "nsteps = 5000  # number of MCMC steps to take\n",
    "# filename = data_path(name+\".h5\")\n",
    "\n",
    "\n",
    "#backend = emcee.backends.HDFBackend(filename)\n",
    "starting_guesses = test_min + (test_max - test_min) * np.random.rand(nwalkers, test_dim)\n",
    "#print(starting_guesses)\n",
    "print(\"MCMC sampling using emcee (affine-invariant ensamble sampler) with {0} walkers\".format(nwalkers))\n",
    "with Pool() as pool:\n",
    "    sampler = emcee.EnsembleSampler(nwalkers, test_dim, log_posterior)\n",
    "    print('burn in sampling started')    \n",
    "    pos = sampler.run_mcmc(starting_guesses, nburn, progress=True, store=True)\n",
    "    print(\"Mean acceptance fraction: {0:.3f} (in total {1} steps)\".format(\n",
    "                        np.mean(sampler.acceptance_fraction), nwalkers*nburn))\n",
    "    print('Burn in completed.')\n",
    "    print(\"Now running the samples\")\n",
    "    sampler.run_mcmc(initial_state=None, nsteps=nsteps, progress=True, tune=False)  \n",
    "    print(\"Mean acceptance fraction: {0:.3f} (in total {1} steps)\".format(\n",
    "                        np.mean(sampler.acceptance_fraction), nwalkers*nsteps))\n",
    "        \n",
    "    # discard burn-in points and flatten the walkers; the shape of samples is (nwalkers*nsteps, Xdim)\n",
    "    #samples = backend.get_chain(flat=True, discard=nburn)\n",
    "    samples = sampler.get_chain(flat=True, discard=nburn)\n",
    "\n",
    "np.savetxt(path+'/data/running_coupling/MCMC_samples', samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6d5629d",
   "metadata": {},
   "outputs": [],
   "source": [
    "bounds=[(a,b) for (a,b) in zip(test_min,test_max)]\n",
    "parameters0 = optimize.differential_evolution(lambda x: -log_posterior(x), \n",
    "                                    bounds=bounds,\n",
    "                                    tol=1e-9,\n",
    "                                    ).x\n",
    "parameters1 = [np.percentile(it,50) for it in samples.T]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ca2dee7",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(samples.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c19a4e57",
   "metadata": {},
   "outputs": [],
   "source": [
    "ParameterLabels = ['$\\\\beta_\\perp$', '$\\\\beta_\\parallel$', '$T^*$',  '$Q_0$', '$\\\\alpha^{inel}_{s, hard}$']\n",
    "ranges = np.array([[-0.9, 2], [-0.9, 2], [0.16, 0.6], [1.45, 2.5], [0.1, 0.4]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "169524d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "samples_df = pd.DataFrame(samples, columns=ParameterLabels)\n",
    "plt.rcParams[\"axes.labelsize\"] = 16\n",
    "g = sns.PairGrid(samples_df.iloc[:,:], corner=True, diag_sharey=False)\n",
    "g.map_lower(sns.histplot, bins=100, color=sns.color_palette()[0])\n",
    "g.map_diag(sns.kdeplot, linewidth=2, shade=True, color=sns.color_palette()[0])\n",
    "for n in range(test_dim):\n",
    "    ax=g.axes[n][n]\n",
    "    ax.axvline(x=parameters0[n], ls='-', c=sns.color_palette()[0], label='MAP')\n",
    "    # ax.axvline(x=parameters1[n], ls='-', c=sns.color_palette()[9], label='central')\n",
    "    # ax.axvline(x=true_values[n], ls='-', c=sns.color_palette()[3], label='Truth')\n",
    "    ax.text(0.1,0.7,s= f'{parameters0[n]:.2f}', transform=ax.transAxes, color=sns.color_palette()[0], fontsize=16)\n",
    "    # ax.text(0.1,0.8,s= f'{parameters1[n]:.2f}', transform=ax.transAxes, color=sns.color_palette()[9], fontsize=16)\n",
    "    # ax.text(0,0.8,s= f'{true_values[n]:.2f}', transform=ax.transAxes, color=sns.color_palette()[3], fontsize=12)\n",
    "g.axes[1,1].legend(loc='best', fontsize=11)\n",
    "for i in range(test_dim):\n",
    "    for j in range(i+1):\n",
    "        g.axes[i,j].set_xlim(*ranges[j])\n",
    "        if i==j:\n",
    "            g.axes[i,j].set_ylim(*ranges[i])\n",
    "            \n",
    "        else:\n",
    "            # g.axes[i,j].set_ylim(0, 2)\n",
    "            g.axes[i,j].axvline(x=parameters0[j], ls='-', c=sns.color_palette()[0])\n",
    "            # g.axes[i,j].axvline(x=parameters1[j], ls='-', c=sns.color_palette()[9])\n",
    "            # g.axes[i,j].axvline(x=true_values[j], ls='-', c=sns.color_palette()[3])\n",
    "            g.axes[i,j].axhline(y=parameters0[i], ls='-', c=sns.color_palette()[0])\n",
    "            # g.axes[i,j].axhline(y=parameters1[i], ls='-', c=sns.color_palette()[9])\n",
    "            # g.axes[i,j].axhline(y=true_values[i], ls='-', c=sns.color_palette()[3])\n",
    "            g.axes[i,j].scatter(parameters0[j], parameters0[i], color='red')\n",
    "            # g.axes[i,j].scatter(parameters1[j], parameters1[i], color=sns.color_palette()[9])\n",
    "            # g.axes[i,j].scatter(true_values[j], true_values[i], color=sns.color_palette()[3])\n",
    "plt.tight_layout()\n",
    "plt.savefig(path+'/plots/running_coupling/Posterior_of_parameters_obs4_param5_pc2_dps60')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0847724",
   "metadata": {},
   "outputs": [],
   "source": [
    "Nsamples = 100\n",
    "Nthin = samples_df.size//Nsamples\n",
    "# prior parameter samples\n",
    "prior_params = (ranges[:,1]-ranges[:,0])*np.random.rand(Nsamples,test_dim) + ranges[:,0]\n",
    "# posterior parameter samples \n",
    "posterior_params =  samples_df.iloc[::Nthin,:].values\n",
    "# prior_params = np.concatenate((np.array([prior_params.T[0]]).T, prior_params.T[1:3].T, np.array([[1.8 for _ in range(Nsamples)]]).T, np.array([prior_params.T[3]]).T), axis=1)\n",
    "# posterior_params = np.concatenate((np.array([posterior_params.T[0]]).T, posterior_params.T[1:3].T, np.array([[1.8 for _ in range(len(posterior_params))]]).T, np.array([posterior_params.T[3]]).T), axis=1)\n",
    "prior_obs = []\n",
    "posterior_obs = []\n",
    "\n",
    "for p in prior_params: \n",
    "    A = np.array([predict_observables(p, diag_std=True)])\n",
    "    Y_predicted = A[:,0,:]\n",
    "    \"\"\"\n",
    "    p2 = p\n",
    "    p2[3] *= 1.151589045\n",
    "    A2 = np.array([predict_observables(p2, diag_std=True)])\n",
    "    Y_predicted2 = A2[:,0,:]\n",
    "    p3 = p\n",
    "    p3[3] *= 0.7194298318\n",
    "    A3 = np.array([predict_observables(p3, diag_std=True)])\n",
    "    Y_predicted3 = A3[:,0,:]\n",
    "    p4 = p\n",
    "    p4[3] *= 0.8473325979\n",
    "    A4 = np.array([predict_observables(p4, diag_std=True)])\n",
    "    Y_predicted4 = A4[:,0,:]\n",
    "    Y_predicted_ = np.concatenate((Y_predicted[0][:Nc1], Y_predicted2[0][Nc1:Nc2], Y_predicted3[0][Nc2:Nc3], Y_predicted4[0][Nc3:]))\n",
    "    \"\"\"\n",
    "    prior_obs.append(list(Y_predicted[0]))\n",
    "\n",
    "for p in posterior_params: \n",
    "    A = np.array([predict_observables(p, diag_std=True)])\n",
    "    Y_predicted = A[:,0,:]\n",
    "    \"\"\"\n",
    "    p2 = p\n",
    "    p2[3] *= 1.151589045\n",
    "    A2 = np.array([predict_observables(p2, diag_std=True)])\n",
    "    Y_predicted2 = A2[:,0,:]\n",
    "    p3 = p\n",
    "    p3[3] *= 0.7194298318\n",
    "    A3 = np.array([predict_observables(p3, diag_std=True)])\n",
    "    Y_predicted3 = A3[:,0,:]\n",
    "    p4 = p\n",
    "    p4[3] *= 0.8473325979\n",
    "    A4 = np.array([predict_observables(p4, diag_std=True)])\n",
    "    Y_predicted4 = A4[:,0,:]\n",
    "    Y_predicted_ = np.concatenate((Y_predicted[0][:Nc1], Y_predicted2[0][Nc1:Nc2], Y_predicted3[0][Nc2:Nc3], Y_predicted4[0][Nc3:]))\n",
    "    \"\"\"\n",
    "    posterior_obs.append(list(Y_predicted[0]))\n",
    "    \n",
    "prior_obs = np.array(prior_obs)\n",
    "posterior_obs = np.array(posterior_obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8165678",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(2,4, figsize=(16,8))\n",
    "fig.subplots_adjust(hspace=0, wspace=0)\n",
    "CLbins = [95]\n",
    "for isample, ilabel, color in zip([prior_obs, posterior_obs], \n",
    "                               ['prior','posterior'], \n",
    "                               [sns.color_palette()[0], sns.color_palette()[3]]):\n",
    "    for CL, opacity in zip(CLbins, [.35, .3, .25, .2]):\n",
    "        label = '{:d}% {}'.format(CL, ilabel)\n",
    "        lower, upper = np.percentile(isample, [50-CL/2., 50+CL/2.], axis=0)\n",
    "        axes[0, 0].fill_between(pT1, lower[:Nc1], upper[:Nc1], color=color, alpha=opacity, label=label)\n",
    "        axes[0, 1].fill_between(pT2, lower[Nc1:Nc2], upper[Nc1:Nc2], color=color, alpha=opacity, label=label)\n",
    "        axes[0, 2].fill_between(pT3, lower[Nc2:Nc3], upper[Nc2:Nc3], color=color, alpha=opacity, label=label)\n",
    "        axes[0, 3].fill_between(pT4, lower[Nc3:Nc4], upper[Nc3:Nc4], color=color, alpha=opacity, label=label)\n",
    "        axes[1, 0].fill_between(pT1, (lower/y_exp)[:Nc1], (upper/y_exp)[:Nc1], color=color, alpha=opacity, label=label)\n",
    "        axes[1, 1].fill_between(pT2, (lower/y_exp)[Nc1:Nc2], (upper/y_exp)[Nc1:Nc2], color=color, alpha=opacity, label=label)\n",
    "        axes[1, 2].fill_between(pT3, (lower/y_exp)[Nc2:Nc3], (upper/y_exp)[Nc2:Nc3], color=color, alpha=opacity, label=label)\n",
    "        axes[1, 3].fill_between(pT4, (lower/y_exp)[Nc3:Nc4], (upper/y_exp)[Nc3:Nc4], color=color, alpha=opacity, label=label)\n",
    "\n",
    "for i, ax,y,yerr,name, pT in zip(range(4), axes[0], \n",
    "                    [y_exp[:Nc1], y_exp[Nc1:Nc2], y_exp[Nc2:Nc3], y_exp[Nc3:Nc4]], [y_exp_err[:Nc1], y_exp_err[Nc1:Nc2], y_exp_err[Nc2:Nc3], y_exp_err[Nc3:Nc4]], \n",
    "                    [r\"$R_{\\rm AA}$\"]*4, [pT1, pT2, pT3, pT4]):\n",
    "\n",
    "    ax.errorbar(pT, y, yerr=yerr, fmt='k.', label='valid')\n",
    "    if i == 0:\n",
    "        ax.set_ylabel(r\"$R_{\\rm AA}$\")\n",
    "    # ax.set_xlabel(\"pT (GeV)\")\n",
    "\n",
    "for i, ax,y,yerr,name, pT in zip(range(4), axes[1], \n",
    "                    [y_exp[:Nc1], y_exp[Nc1:Nc2], y_exp[Nc2:Nc3], y_exp[Nc3:Nc4]],[y_exp_err[:Nc1], y_exp_err[Nc1:Nc2], y_exp_err[Nc2:Nc3], y_exp_err[Nc3:Nc4]],\n",
    "                    [\"Ratio to data\"]*4, [pT1, pT2, pT3, pT4]):\n",
    "    ax.errorbar(pT, y/y, yerr=yerr/y, fmt='k.', label='valid')\n",
    "    ax.axhline(y=1, ls='-', color='k')\n",
    "    if i == 0: \n",
    "        ax.set_ylabel(\"Ratio to data\")\n",
    "    ax.set_xlabel(\"pT (GeV)\")\n",
    "# axes[0,0].semilogy()\n",
    "# axes[0,1].semilogy()\n",
    "axes[0, 0].set_ylim(0,1.8)\n",
    "axes[0, 1].set_ylim(0,1.8)\n",
    "axes[0, 2].set_ylim(0,1.8)\n",
    "axes[0, 3].set_ylim(0,1.8)\n",
    "axes[1, 0].set_ylim(0,2)\n",
    "axes[1, 1].set_ylim(0,2)\n",
    "axes[1, 2].set_ylim(0,2)\n",
    "axes[1, 3].set_ylim(0,2)\n",
    "axes[0, 0].set_title('Au+Au 200 GeV, 0-10%', fontsize=16)\n",
    "axes[0, 1].set_title('Pb+Pb 2760 GeV, 0-5%', fontsize=16)\n",
    "axes[0, 2].set_title('Au+Au 200 GeV, 20-30%', fontsize=16)\n",
    "axes[0, 3].set_title('Pb+Pb 2760 GeV, 30-40%', fontsize=16)\n",
    "axes[0, 0].legend(prop={'size': 12})\n",
    "axes[0, 1].legend(prop={'size': 12})\n",
    "axes[0, 2].legend(prop={'size': 12})\n",
    "axes[0, 3].legend(prop={'size': 12})\n",
    "axes[0, 1].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[0, 2].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[0, 3].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[1, 1].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[1, 2].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[1, 3].tick_params(axis='y', which='both', labelleft=False)\n",
    "axes[0, 0].tick_params(direction=\"in\", which='both')\n",
    "axes[0, 1].tick_params(direction=\"in\", which='both')\n",
    "axes[0, 2].tick_params(direction=\"in\", which='both')\n",
    "axes[0, 3].tick_params(direction=\"in\", which='both')\n",
    "axes[1, 0].tick_params(direction=\"in\", which='both')\n",
    "axes[1, 1].tick_params(direction=\"in\", which='both')\n",
    "axes[1, 2].tick_params(direction=\"in\", which='both')\n",
    "axes[1, 3].tick_params(direction=\"in\", which='both')\n",
    "\n",
    "# plt.legend(loc='upper center', bbox_to_anchor=(0, -0.1), fancybox=True, shadow=True, ncol=3)\n",
    "# plt.tight_layout()\n",
    "plt.savefig(path+\"/plots/running_coupling/Posterior_pca2_lower1-5_param5_dps60_pc2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7712b60",
   "metadata": {},
   "outputs": [],
   "source": [
    "cc = 0.1189\n",
    "Q = 91.1876\n",
    "Lambda = 0.2\n",
    "NC = 3\n",
    "Nf = 3\n",
    "CA = 3\n",
    "c0 = cc / (4*np.pi/9/(np.log((Q/Lambda)**2)))\n",
    "g_const = np.sqrt(4*np.pi*0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26e08adc",
   "metadata": {},
   "outputs": [],
   "source": [
    "CL = 95\n",
    "plt.figure()\n",
    "T_list = np.arange(0.16, 0.6, 0.001)\n",
    "prior_qpara = [[] for _ in range(len(prior_params))]\n",
    "for i, prior in enumerate(prior_params): \n",
    "    beta_perp, beta_para, Tstar, Q0, alpha = prior\n",
    "    qpara = []\n",
    "    for iT in T_list: \n",
    "        c = 4*np.pi/9/(np.log((2*np.pi*max(iT, Tstar)/Lambda)**2)) * c0\n",
    "        g = np.sqrt(4.*np.pi*c)\n",
    "        mD_2 = g**2*iT**2*(NC/3+Nf/6)\n",
    "        Minf_2 = mD_2/2\n",
    "        mu = 4*iT\n",
    "        qhat_QCD = g**2*CA*iT*Minf_2/4/np.pi*np.log(1+(mu/Minf_2)**2)\n",
    "        qpara.append(qhat_QCD*(1+beta_para*(Lambda/iT))/(iT**3))\n",
    "    prior_qpara[i] = qpara\n",
    "lower, upper = np.percentile(prior_qpara, [50-CL/2., 50+CL/2.], axis=0)\n",
    "plt.fill_between(T_list, lower, upper, color=sns.color_palette()[0], alpha=0.35, label='95% prior')\n",
    "\n",
    "posterior_qpara = [[] for _ in range(len(posterior_params))]\n",
    "for i, posterior in enumerate(posterior_params): \n",
    "    beta_perp, beta_para, Tstar, Q0, alpha = posterior\n",
    "    qpara = []\n",
    "    qhat_const = []\n",
    "    for iT in T_list: \n",
    "        c = 4*np.pi/9/(np.log((2*np.pi*max(iT, Tstar)/Lambda)**2)) * c0\n",
    "        g = np.sqrt(4.*np.pi*c)\n",
    "        mD_2 = g**2*iT**2*(NC/3+Nf/6)\n",
    "        Minf_2 = mD_2/2\n",
    "        mu = 4*iT\n",
    "        qhat_QCD = g**2*CA*iT*Minf_2/4/np.pi*np.log(1+(mu/Minf_2)**2)\n",
    "        qpara.append(qhat_QCD*(1+beta_para*(Lambda/iT))/(iT**3))\n",
    "        qhat_const.append(g_const**2*CA*iT*Minf_2/4/np.pi*np.log(1+(mu/Minf_2)**2)/iT**3)\n",
    "    posterior_qpara[i] = qpara\n",
    "lower, upper = np.percentile(posterior_qpara, [50-CL/2., 50+CL/2.], axis=0)\n",
    "central = np.percentile(posterior_qpara, 50, axis=0)\n",
    "plt.fill_between(T_list, lower, upper, color=sns.color_palette()[3], alpha=0.35, label='95% posterior')\n",
    "plt.plot(T_list, np.mean(np.array(posterior_qpara), axis=0), label='mean', color=sns.color_palette()[3])\n",
    "plt.plot(T_list, qhat_const, '--', label='pQCD', color='black')\n",
    "plt.tick_params(direction=\"in\", which='both')\n",
    "plt.xlabel('T (GeV)')\n",
    "plt.ylabel('$\\hat{q}_L / T^3$')\n",
    "plt.legend()\n",
    "plt.xlim(0.16, 0.6)\n",
    "plt.ylim(0, 50)\n",
    "plt.savefig(path+\"/plots/running_coupling/qhat_dependence\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5775215b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
